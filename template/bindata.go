// Code generated by go-bindata.
// sources:
// index.js
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4f\x6f\xdb\xc8\x0f\xbd\xfb\x53\xb0\x27\x49\xa8\x23\xf5\xf2\x03\x7e\x48\xe0\x5d\xa0\x40\x8b\xee\x62\xdb\x2d\x9a\x2c\xf6\x50\x14\xc5\x44\x43\x5b\xd3\x8c\x86\x2a\x87\x8a\x62\x18\xfe\xee\x8b\xf9\x63\x45\x4e\x9b\xc3\x02\x7b\xb2\x35\xa4\x1e\x1f\xc9\x47\x8e\x9a\xe6\x9d\x72\xda\x22\xbc\x56\xed\xdd\x8e\x69\x74\x1a\xf0\x1e\x9d\x78\x50\x6d\x4b\xac\x8d\xdb\x81\x10\xf8\x01\xdb\xd5\x76\x74\xad\x18\x72\xe0\x3b\xd3\xa7\xf7\xb8\xd4\x4a\x54\x05\x87\x15\x00\xa3\x8c\xec\xc0\xe1\x04\x1f\x99\x7a\xe3\xb1\x2c\x19\x3d\xd9\x7b\x5c\x03\xe3\x37\x6c\xa5\x82\xcd\x2f\xd1\x17\xa0\x69\xae\x07\x35\x39\x90\x0e\x61\x06\x56\x4e\x83\x71\xc1\x33\x9e\xa3\xbb\x87\x2d\x53\x1f\x1f\x06\xc5\xe8\x04\x06\xa6\x16\xbd\xaf\x23\x48\x4b\xce\x0b\x0c\xb0\x01\xc6\xef\xa3\x61\x2c\x8b\xb6\x33\x56\x7f\xcd\x5e\x45\x55\xe3\x03\xb6\x6f\x8d\xc5\xb2\xa8\x9b\xc3\xa1\x7e\x9b\x43\x7d\x50\x3d\x1e\x8f\xc5\x1a\x3e\x7f\x59\x67\x46\x10\xe2\x5d\xce\x01\xd0\xdd\xaf\xe3\xf9\xb1\xba\x8a\xbf\xf7\x8a\xc1\x2a\x2f\xef\xd1\x7b\xb5\xc3\x74\x38\xd4\x5e\xb4\x71\xb5\x47\x79\xe3\x5a\x0a\xf5\x2a\x8b\x51\xb6\x17\xff\x2f\xf2\x6b\x4d\xf3\x07\xed\xc0\x8b\x72\x5a\xb1\x06\x64\x86\x3e\x21\xf8\x58\xd9\x85\xe1\x11\x11\x99\x6b\x72\x65\x11\xaa\x5b\xac\xa1\x44\xe6\x45\xed\x52\xe2\x64\xb1\x46\x66\xe2\x60\xad\x85\xae\x85\x43\xf4\x2a\xc7\x3d\x56\x8f\x70\x34\xca\x19\x1c\x8d\xf2\x53\x38\x4b\xbb\x60\xfb\x11\x0c\x96\x99\xc3\x06\x68\x94\x27\x51\x02\x7c\x6b\xc9\x63\xc0\x6f\x49\xe3\x59\x00\xb3\x4d\x87\xf0\x62\xb3\x81\x57\xd5\x7c\x1e\xca\x73\xd3\x19\x0f\x3d\x2a\xe7\x63\x9f\x83\xb8\x60\xab\x8c\x45\x0d\x0d\x0c\xca\x99\xf6\x0e\x75\x0d\xd7\x04\x13\x66\x1d\x41\xa7\x58\xd7\x33\x46\x3a\x2c\x67\xae\x47\x40\xeb\xf1\x2c\x08\x7c\x4a\x4a\x4c\x52\x4a\xf2\x84\xc9\x48\x17\x0f\xac\x12\xf4\x12\xb2\x1a\x46\x49\x92\x4b\x55\x5b\x22\xfc\xe6\xa0\x55\x1e\x81\xb6\x91\x63\x1f\x46\xa3\x13\x19\xd6\x20\x21\x03\x93\xe8\x33\xfa\x81\x5c\x70\xbb\x0d\xa4\x96\x24\x23\x81\x72\x51\xc8\x47\xc2\x67\x42\x6b\x9a\xbf\xd9\x48\xa2\x9a\x50\x9a\xac\x98\x26\xc8\x3c\x30\x15\x9a\x6b\x55\x78\x88\x12\x8c\xc3\xe3\xcd\xce\x29\x9b\x51\xde\x38\x1d\xc8\x1a\x37\x8c\x99\xc7\x49\xad\x53\xc0\x2f\x7f\xbf\xfe\xf3\x43\xed\x63\xa3\xcd\x76\x9f\x26\xb9\x3a\x97\x35\x3a\x9d\xca\x1a\xb8\x1d\x57\xab\x79\x5f\x84\xc4\x21\xb3\x79\x5c\x0c\x5d\x34\xbe\x13\x19\x4a\xc6\xef\x61\xea\x7d\xea\x75\x98\x9d\xec\xfd\x9a\xf4\xfe\x6a\xb5\x02\xf0\x93\x91\xb6\x83\xe0\x59\xef\x50\xca\xa2\x25\x27\xe8\xe4\x42\xf6\x03\x16\xd5\x49\x24\xb1\xe6\x85\x1a\x06\x6b\x5a\x15\xa2\x34\xdf\x3c\xb9\xe2\x72\x75\x2a\xeb\x8c\x0a\x1b\x78\x92\x52\x80\xbe\x25\xbd\x9f\x0b\x7d\xcb\xa8\xee\xae\x9e\xc1\x7d\xb8\x98\xa6\xe9\x62\x4b\xdc\x5f\x8c\x6c\x31\x8c\x33\xea\x39\x50\x10\x2a\x42\x40\x0b\xab\xc8\x23\xc3\x96\x18\x5a\x4b\xa3\x9e\x17\x98\x07\x4d\x61\xac\x3b\xe3\xd7\xe0\x09\xbe\x8d\x61\x3d\x59\xb5\x07\x65\xc9\xed\x66\xa4\x28\x3c\x23\xc1\x87\x79\x0f\xbd\x72\x2f\xe0\xbd\xda\xdf\x62\x90\xb8\xef\x68\xb4\x3a\xed\x36\x1e\x5b\x01\x4f\x3d\xc2\x9d\x49\xdd\x1c\x98\x06\xe4\x19\x29\xb0\x3d\xd5\x20\x92\xfb\x15\x88\xc1\x91\xd4\x60\x51\x0a\x0f\x77\x88\x03\x18\x49\x1a\x9d\xd4\x3e\xb2\x76\x34\xad\x41\xf9\xd5\xd9\x08\x1a\x0f\x1d\x4d\x3f\x64\x74\x8b\x9d\xba\x47\x5f\x3f\xd6\x3b\x2c\xbb\x27\xdd\x5a\xff\xa4\x43\xd5\x7f\xdf\x21\x6a\x05\xe5\xc2\x0b\xa3\xea\x9f\x51\xc0\x09\xf0\x59\x3c\xc1\x07\x69\x06\xab\xcc\x73\x1a\x7a\x16\xe1\xb8\xca\x4a\xde\x8e\xd6\xfe\xc5\x36\xfb\x0e\x4c\x42\x2d\x59\x78\x09\xc5\x65\xd3\x14\xf0\x12\x66\x49\x77\xe4\xa5\xa8\xf2\x09\xb1\xd9\x19\xa7\xc2\xab\x57\x27\xa8\x30\x47\x9f\x72\xfb\x36\x59\xf1\x45\x88\x5e\x5c\x2e\x69\xa5\x9b\xa8\xe8\x50\x69\x64\x9f\x6c\x75\x7e\xca\xb6\x1e\xa5\x23\x9d\x4d\xe9\x21\x5b\x18\x7b\x12\xfc\xaa\xb4\xe6\x6c\x36\x43\x36\x8d\x6c\x8b\xcb\x53\x3e\x21\xc5\x34\x99\x8b\xfb\x7d\x41\x30\x34\xb4\x96\x0e\x5d\xbc\xd7\x47\xbb\xbc\x43\xc2\xf2\x38\x75\x37\x8e\xc7\xc9\x25\x55\x91\xd1\xd7\x5e\x94\x8c\x3e\xae\x99\xfc\xff\x6b\xbc\x27\x16\x1e\x28\xc9\x9c\x33\xab\x16\x16\xa7\x93\x69\x16\x4b\xbc\x79\xea\x56\x49\xdb\x95\xe5\x82\xc9\x22\xd4\xff\x5e\xbd\xaa\x96\x2b\x2c\x6d\xb0\xc3\x21\x5c\x47\xf5\x0d\x9b\xdd\x0e\xf9\xdd\xcd\xcd\x47\x38\x1e\x57\xf8\x30\x10\x8b\xff\x5c\xfc\xf8\x91\xf0\x05\x36\xf3\x3c\x3c\xd9\x6b\xf9\x9b\xe7\x67\x7b\xef\x6a\x75\x6c\x1a\x38\x1c\xd2\x5d\xf4\x2f\x22\xc4\xef\xaf\x33\xf8\x65\x3f\xa2\xb5\x8e\xbb\xfa\x31\x82\xd3\x21\xc0\x3f\x01\x00\x00\xff\xff\xcd\x06\x19\x6e\xcd\x09\x00\x00")

func indexJsBytes() ([]byte, error) {
	return bindataRead(
		_indexJs,
		"index.js",
	)
}

func indexJs() (*asset, error) {
	bytes, err := indexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.js", size: 2509, mode: os.FileMode(420), modTime: time.Unix(1490815025, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.js": indexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.js": &bintree{indexJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
